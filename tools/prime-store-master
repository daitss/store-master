#!/usr/bin/env ruby
#
# From the storemaster library:

ENV['BUNDLE_GEMFILE'] = File.expand_path(File.join(File.dirname(__FILE__), '../Gemfile'))
require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../lib/'))

require 'store/data-model'

DM.setup('/opt/fda/etc/db.yml', 'ps_store_master')

# ENV['TZ'] = 'UTC' 

# Our data - we don't use field 5 here:
#
# E20051213_AAAAAA	http://silos.darchive.fcla.edu/001/data/E20051213_AAAAAA
# E20060108_AAAAAA	http://silos.tarchive.fcla.edu/003/data/E20060108_AAAAAA

include DM

loc   = 'http://silos.darchive.fcla.edu/'
pool1 =  Pool.exists?(loc) ? Pool.lookup(loc) : Pool.create(loc) 
loc   = 'http://silos.tarchive.fcla.edu/'
pool2 =  Pool.exists?(loc) ? Pool.lookup(loc) : Pool.create(loc) 

pool2.read_preference = 10

puts pool1.put_location
puts pool2.put_location

while line = STDIN.gets do

  ieid, loc = line.strip.split(/\s+/, 2)

  unless ieid =~ /^E2/
    STDERR.puts "Unexpected line '#{line.strip}', skipping"
    next
  end

  # if pkg = DM::Package.first(:name => ieid)
  #   if not pkg.destroy 
  #     STDERR.puts "Unable to remove pre-exising package record for name '#{ieid}', skipping"
  #     next
  #   end
  # end

  if loc =~ /#{pool1.put_location}/
    pool = pool1
  elsif loc =~ /#{pool2.put_location}/
    pool = pool2
  else
    STDERR.puts "Can't find pool for location '#{loc}', skipping."
    next
  end

  pkg  = DM::Package.first_or_create(:ieid => ieid, :name => ieid)
  copy = DM::Copy.create(:store_location => loc, :pool => pool.dm_record)
  puts copy.url
  pkg.copies << copy

  if not pkg.save
    STDERR.puts "Error saving #{ieid}: " + pkg.errors.map{ |e| e.to_s }.join("\n -- ")
  end

end
